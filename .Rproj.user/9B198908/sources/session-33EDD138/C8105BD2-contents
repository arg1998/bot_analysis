---
title: "R Notebook"
output: html_notebook
---

```{r setup, include=FALSE}
# see https://rstudio.github.io/renv/articles/collaborating.html for how to config renv - the next line should do it
renv::activate()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(brms)
library(stringr)
library(glue)
library(ggplot2)
library(corrplot)
library(kableExtra)

library(dplyr)
# install.packages("devtools") # unless you have it already
library(devtools)
# install_github("jtextor/dagitty/r")
theme_set(theme_default())
# set rstan options
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
```

```{r load data}
# pull from the CSV file.
# see dataset_schema.yml for details
df.all <- read_csv('dataset/OSS Bots - April 15 (ANONYMIZED).csv',
                   col_types = list(
                      ref_id = col_character(),
                      user_login_date = col_datetime(format = ""),
                      user_scenario_combination = col_character(),
                      # user_source = col_factor(c("prolific","UVic")),
                      user_source = col_character(),
                      q1 = col_factor(c("1","2")),
                      q2 = col_factor(c("1","2","3","4"),ordered=F),
                      q3 = col_character(),
                      q4 = col_factor(c("1","2","3","4"),ordered=F),
                      q5 = col_factor(c("1","2","3","4"),ordered=F),
                      q6 = col_factor(c("1","2")), # have a GH account
                      q7 = col_factor(c("1","2")), # submitted PR
                      q8 = col_factor(c("1","2")), # reviewed PR
                      q9 = col_factor(c("1","2","3","4","5","6"),ordered=T), #gh_use
                      q10 = col_factor(c("1","2","3","4"),ordered=F),
                      q11 = col_factor(c("1","2","3"),ordered=F), #define_pr correct = 3
                      q14 = col_factor(c("1","2","3","4","5"),ordered=F), #gender
                      q15 = col_factor(c("1","2","3","4","5","6","7"),ordered=T),#age
                      q16 = col_character(),
                      q17 = col_factor(c("1","2","3","4"),ordered=T),
                      sc1_answer = col_factor(c("1","2","3")),
                      sc2_answer = col_factor(c("1","2","3")),
                      sc3_answer = col_factor(c("1","2","3")),
                      sc4_answer = col_factor(c("1","2","3")),
                      survey_completion_date = col_datetime(format = ""),
                      residence_country = col_character(),
                      sex = col_character()
                   )
)
colnames(df.all) <- c(
     "ref_id",
     "user_login_date",
     "user_scenario_combination",
     "user_source",
     "screen_prog",
      "screen_break",
      "screen_param",
      "screen_compiler",
      "screen_recursive",
      "github_account",
      "submit_pr",
      "review_pr",
      "gh_use",
      "git_analogy",
      "define_pr",
      "gender",
      "age",
      "profession",
      "experience",
      "sc1_answer",
      "sc2_answer",             
      "sc3_answer",
      "sc4_answer",
      "survey_completion_date",   
      "residence_country",
      "sex"
)
df.all <- df.all %>% select(!sex) %>% select(!residence_country) #not needed TODO: Drop in CSV
# number of participants/data points 
num_rows <- nrow(df.all)
```

```{r load and clean codes}
df.codes <- read.csv('dataset/OSS Bots codes.csv')
# last character in the UID is the scenario number 
# rest of the UID is the ref_id 
# separating scenario number from ref_id 
df.codes <- df.codes %>% mutate(scenario = as.integer(str_sub(uid, -1,-1)), ref_id = str_sub(uid, 0, -2))
# dropping the uid column 
df.codes$uid <- NULL
df_shortcode <- read.csv('dataset/bot_long_answer.csv')
df.all <- df.all %>% left_join(df_shortcode, by='ref_id')
```

```{r Basic experience/demographics}

# recode 
df.all$gender <- recode(df.all$gender, `1` = "Male", `2` = "Female", `3` = "Non-binary", `4` = "Other", `5` = "Prefer Not to say")
df.all$age <- recode(df.all$age, `1` = "<18", `2` = "18-24", `3` = "25-34", `4` = "35-44", `5` = "45-54", `6` = "55-65", `7` = ">65")
df.all$experience <- recode(df.all$experience, `1` = "<1 year", `2` = "1-3 years", `3` = "3-5 years", `4` = ">5 years")
df.everything <- df.all %>% left_join(df_shortcode, by='ref_id')

# merge the Pull Request questions
# Q8, Q9, Q12 - map this onto a three point PR expertise scale; novice, intermediate, expert. 2 intermediates = expert. Intermediate + novice = intermediate
# expert + novice = intermediate
# Q11 (software change) -> novice, Q12 correct -> intermediate
# Q8 reviewed -> intermediate
# Q7 submitted -> intermediate
df.all <- df.all %>% 
  # select(ref_id,define_pr,submit_pr,review_pr) %>% 
  mutate(
    PRActivity = factor(case_when(
      define_pr == 3 & review_pr == 1 & submit_pr == 1 ~ "Expert",
      define_pr != 3 & review_pr == 2 & submit_pr == 2 ~ "Novice",
      TRUE ~ "Intermediate"
    )
  )
)

# merge the Github questions
# need to measure consistency here as well.
# Q6-Github Account (1 = yes) - NB: as this was a screening q, everyone does. | github_account == 2 
# Q9 - Github use gh_use 1 = daily, 6=never
# here intermediate is someone who uses GH at least once every 6 months or every month
df.all <- df.all %>%
  # select(ref_id, q6, q9) %>%
  mutate(
    GitHubActivity = factor(case_when(
      gh_use < 3  ~ "Experienced", # more than monthly, and account
      gh_use > 5 ~ "Infrequent", # less than once a year, or no account
      TRUE ~ "Intermediate" # TODO: do we need intermediate? Makes analysis confusing. 
    ))
)

# Bot experience
df.all <- df.all %>% mutate(BotExperience = case_when(
    q12 == "" & neil_code != "Unsure"  & neil_code != "DevTool" ~ 'Intermediate',
  q12 == "" & (neil_code == "Unsure" | neil_code == "DevTool") ~ 'Inexperienced',
  q12 != "" ~ 'Experienced')
)


# removing NA values from user source
df.all$user_source[is.na(df.all$user_source)] <- "uvic"


df.all$sc1_answer <- factor(recode(df.all$sc1_answer, `1` = "Proactive", `2` = "Neutral", `3` = "Reactive"),levels=c("Reactive","Neutral","Proactive"),ordered = T)
df.all$sc2_answer <- factor(recode(df.all$sc2_answer, `3` = "Proactive", `2` = "Neutral", `1` = "Reactive"),levels=c("Reactive","Neutral","Proactive"), ordered=T)
df.all$sc3_answer <- factor(recode(df.all$sc3_answer, `1` = "Factual", `2` = "Neutral", `3` = "Personable"),levels=c("Factual","Neutral","Personable"),ordered = T)
df.all$sc4_answer <- factor(recode(df.all$sc4_answer, `3` = "Factual", `2` = "Neutral", `1` = "Personable"), levels=c("Factual","Neutral","Personable"),ordered = T)

```

```{r}

dataset <- df.all %>% select(ref_id, user_scenario_combination, user_source, gender, age, profession, experience, sc1_answer, sc2_answer, sc3_answer, sc4_answer, q12, q13, neil_code, PRActivity, GitHubActivity, BotExperience)

dataset <- dplyr::rename(dataset, bot_example = q12,
                              bot_definition = q13,
                              YrsExperience=experience,
                              ScenarioChoice3_Persona = sc3_answer,
                              ScenarioChoice4_Persona = sc4_answer,
                              ScenarioChoice1_Autonomy = sc1_answer,
                              ScenarioChoice2_Autonomy = sc2_answer,
                              Gender = gender,
                              Age = age)
write_csv(dataset, "dataset/Latest Dataset.csv")

```

# Data Analysis

## Model definition

```{r}
m1_sc1 = 'ScenarioChoice1_Autonomy ~ GitHubActivity'
m2_sc1 = 'ScenarioChoice1_Autonomy ~ BotExperience + GitHubActivity + PRActivity + YrsExperience' # only technical 
m3_sc1 = 'ScenarioChoice1_Autonomy ~ ScenarioChoice3_Persona' # answer to SC3 (persona)

m1_sc2 = 'ScenarioChoice2_Autonomy ~ GitHubActivity'
m2_sc2 = 'ScenarioChoice2_Autonomy ~ BotExperience + GitHubActivity + PRActivity + YrsExperience' # only technical 
m3_sc2 = 'ScenarioChoice2_Autonomy ~ ScenarioChoice3_Persona' # answer to SC3 (persona)

m1_sc3 = 'ScenarioChoice3_Persona ~ GitHubActivity'
m2_sc3 = 'ScenarioChoice3_Persona ~ BotExperience + GitHubActivity + PRActivity + YrsExperience' # only technical 
m3_sc3 = 'ScenarioChoice3_Persona ~ ScenarioChoice1_Autonomy' # answer to SC3 (autonomy)

m1_sc4 = 'ScenarioChoice4_Persona ~ GitHubActivity'
m2_sc4 = 'ScenarioChoice4_Persona ~ BotExperience + GitHubActivity + PRActivity + YrsExperience' # only technical 
m3_sc4 = 'ScenarioChoice4_Persona ~ ScenarioChoice1_Autonomy' # answer to SC4 (autonomy)

```

## Data transformation

here we convert ordinal and nominal values into numeric and one-hot matrix for the LM and GLM

```{r}
library(data.table)
df <- copy(dataset)

# transform ordinal variables to numeric
df$YrsExperience <- as.numeric(factor(df$YrsExperience, levels = c("<1 year", "1-3 years", "3-5 years", ">5 years")))
df$PRActivity <- as.numeric(factor(df$PRActivity, levels = c("Novice", "Intermediate", "Expert")))
df$GitHubActivity <- as.numeric(factor(df$GitHubActivity, levels = c("Infrequent", "Intermediate", "Experienced")))
df$BotExperience <- as.numeric(factor(df$BotExperience, levels = c("Inexperienced", "Intermediate", "Experienced")))

# transform categorical variables to binary
df$ScenarioChoice1_Autonomy <- model.matrix(~ 0 + ScenarioChoice1_Autonomy, data = df)[,-2]
df$ScenarioChoice2_Autonomy <- model.matrix(~ 0 + ScenarioChoice2_Autonomy, data = df)[,-2]
df$ScenarioChoice3_Persona <- model.matrix(~ 0 + ScenarioChoice3_Persona, data = df)[,-2]
df$ScenarioChoice4_Persona <- model.matrix(~ 0 + ScenarioChoice4_Persona, data = df)[,-2]

```

## Linear Modeling (LM)

```{r}

# scenario 1
lm1_sc1 <- lm(m1_sc1, data = df)
lm2_sc1 <- lm(m2_sc1, data = df)
lm3_sc1 <- lm(m3_sc1, data = df)


# scenario 2
lm1_sc2 <- lm(m1_sc2, data = df)
lm2_sc2 <- lm(m2_sc2, data = df)
lm3_sc2 <- lm(m3_sc2, data = df)

# scenario 3
lm1_sc3 <- lm(m1_sc3, data = df)
lm2_sc3 <- lm(m2_sc3, data = df)
lm3_sc3 <- lm(m3_sc3, data = df)

# scenario 4
lm1_sc4 <- lm(m1_sc4, data = df)
lm2_sc4 <- lm(m2_sc4, data = df)
lm3_sc4 <- lm(m3_sc4, data = df)
```

## Generalized Linear Modeling (GLM)

```{r}

# glm_b = binomial

# scenario 1
    # binomail
glm1_b_sc1 <- glm(m1_sc1, data = df, family = binomial)
glm2_b_sc1 <- glm(m2_sc1, data = df, family = binomial)
glm3_b_sc1 <- glm(m3_sc1, data = df, family = binomial)


# scenario 2
    # binomail
glm1_b_sc2 <- glm(m1_sc2, data = df, family = binomial)
glm2_b_sc2 <- glm(m2_sc2, data = df, family = binomial)
glm3_b_sc2 <- glm(m3_sc2, data = df, family = binomial)


# scenario 3
    # binomail
glm1_b_sc3 <- glm(m1_sc3, data = df, family = binomial)
glm2_b_sc3 <- glm(m2_sc3, data = df, family = binomial)
glm3_b_sc3 <- glm(m3_sc3, data = df, family = binomial)

# scenario 4
    # binomail
glm1_b_sc4 <- glm(m1_sc4, data = df, family = binomial)
glm2_b_sc4 <- glm(m2_sc4, data = df, family = binomial)
glm3_b_sc4 <- glm(m3_sc4, data = df, family = binomial)
```

## Model Verification

### LM

```{r}

summary(lm1_sc1)
anova(lm1_sc1)
plot(density(lm1_sc1[['residuals']]),main='Residual KDE Plot - lm1_sc1',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")


summary(lm1_sc2)
anova(lm1_sc2)
plot(density(lm1_sc2[['residuals']]),main='Residual KDE Plot - lm1_sc2',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")

summary(lm1_sc3)
anova(lm1_sc3)
plot(density(lm1_sc3[['residuals']]),main='Residual KDE Plot - lm1_sc3',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")

summary(lm1_sc4)
anova(lm1_sc4)
plot(density(lm1_sc4[['residuals']]),main='Residual KDE Plot - lm1_sc4',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")
```

```{r}

summary(lm2_sc1)
anova(lm2_sc1)
plot(density(lm2_sc1[['residuals']]),main='Residual KDE Plot - lm2_sc1',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")


summary(lm2_sc2)
anova(lm2_sc2)
plot(density(lm2_sc2[['residuals']]),main='Residual KDE Plot - lm2_sc2',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")

summary(lm2_sc3)
anova(lm2_sc3)
plot(density(lm2_sc3[['residuals']]),main='Residual KDE Plot - lm2_sc3',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")

summary(lm2_sc4)
anova(lm2_sc4)
plot(density(lm2_sc4[['residuals']]),main='Residual KDE Plot - lm2_sc4',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")
```

```{r}

summary(lm3_sc1)
anova(lm3_sc1)
plot(density(lm3_sc1[['residuals']]),main='Residual KDE Plot - lm3_sc1',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")


summary(lm3_sc2)
anova(lm3_sc2)
plot(density(lm3_sc2[['residuals']]),main='Residual KDE Plot - lm3_sc2',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")

summary(lm3_sc3)
anova(lm3_sc3)
plot(density(lm3_sc3[['residuals']]),main='Residual KDE Plot - lm3_sc3',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")

summary(lm3_sc4)
anova(lm3_sc4)
plot(density(lm3_sc4[['residuals']]),main='Residual KDE Plot - lm3_sc4',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")
```

### GLM

```{r}


summary(glm1_b_sc1)
anova(glm1_b_sc1)
plot(density(glm1_b_sc1[['residuals']]),main='Residual KDE Plot - glm1_b_sc1',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")


summary(glm1_b_sc2)
anova(glm1_b_sc2)
plot(density(glm1_b_sc2[['residuals']]),main='Residual KDE Plot - glm1_b_sc2',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")

summary(glm1_b_sc3)
anova(glm1_b_sc3)
plot(density(glm1_b_sc3[['residuals']]),main='Residual KDE Plot - glm1_b_sc3',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")

summary(glm1_b_sc4)
anova(glm1_b_sc4)
plot(density(glm1_b_sc4[['residuals']]),main='Residual KDE Plot - glm1_b_sc4',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")
```

```{r}
summary(glm2_b_sc1)
anova(glm2_b_sc1)
plot(density(glm2_b_sc1[['residuals']]),main='Residual KDE Plot - glm2_b_sc1',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")


summary(glm2_b_sc2)
anova(glm2_b_sc2)
plot(density(glm2_b_sc2[['residuals']]),main='Residual KDE Plot - glm2_b_sc2',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")

summary(glm2_b_sc3)
anova(glm2_b_sc3)
plot(density(glm2_b_sc3[['residuals']]),main='Residual KDE Plot - glm2_b_sc3',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")

summary(glm2_b_sc4)
anova(glm2_b_sc4)
plot(density(glm2_b_sc4[['residuals']]),main='Residual KDE Plot - glm2_b_sc4',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")
```

```{r}
summary(glm3_b_sc1)
anova(glm3_b_sc1)
plot(density(glm3_b_sc1[['residuals']]),main='Residual KDE Plot - glm3_b_sc1',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")


summary(glm3_b_sc2)
anova(glm3_b_sc2)
plot(density(glm3_b_sc2[['residuals']]),main='Residual KDE Plot - glm3_b_sc2',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")

summary(glm3_b_sc3)
anova(glm3_b_sc3)
plot(density(glm3_b_sc3[['residuals']]),main='Residual KDE Plot - glm3_b_sc3',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")

summary(glm3_b_sc4)
anova(glm3_b_sc4)
plot(density(glm3_b_sc4[['residuals']]),main='Residual KDE Plot - glm3_b_sc4',xlab='Residual value')
glue("\n\n\n##########################################################################\n\n\n")
```
